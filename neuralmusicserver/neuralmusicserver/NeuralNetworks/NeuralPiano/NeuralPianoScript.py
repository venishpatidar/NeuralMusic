import sys
from .model import NeuralPianoModel
import numpy as np
import pickle

NOTES_PATH = './notes'




class NeuralPiano:
    def __init__(self,NotesPath,weights):
        self.model = NeuralPianoModel.model(weights)  
        with open(NotesPath, 'rb') as filepath:
            notes = pickle.load(filepath)
   
        self.pitchnames = sorted(set(item for item in notes))
        self.n_vocab = len(set(notes))
        self.int_to_note = dict((number, note) for number, note in enumerate(self.pitchnames))
        self.note_to_int = dict((note, number) for number, note in enumerate(self.pitchnames))

    def prepareInput(self,Input,padlength=100):
        dim = len(Input) 
        if(dim<padlength):
            Input.reverse()
            [Input.append(0) for _ in range(padlength-dim)]
            Input.reverse()
        elif(dim>padlength):
            Input = Input[-padlength:]
        else:
            pass

        return np.reshape(Input,(padlength,1))



    def getNotes(self,Input,PredictLength):

        Input = self.prepareInput(Input,100)

        assert np.shape(Input) == (100,1) 
        Input = np.array(Input)
        
        pattern = []
        pattern.append([self.note_to_int[char[0]] for char in Input])
        pattern = np.array(pattern)
        pattern = pattern.reshape(100,1)
        prediction_output=[]

        for note_index in range(PredictLength):
            prediction_input = np.reshape(pattern, (1, len(pattern), 1))

            prediction_input = prediction_input / float(self.n_vocab) 
            prediction = self.model.predict(prediction_input, verbose=0)

            index = np.argmax(prediction)
            result = self.int_to_note[index]
            prediction_output.append(result)
            pattern = np.append(pattern,index)
            pattern = pattern[1:len(pattern)] 
        return prediction_output        




    def predict(self,Input):
        assert np.shape(Input) == (100,1) or np.shape(Input) ==(100,)
        Input = np.array(Input)
        Input = Input.reshape(1,100,1)
        return self.model.predict(Input)


# a = ['E5', 'C5', 'A3', 'C5', 'A2', 'A3', 'E5', 'E4', 'A3', 'A5']
# a = ['D4', 'D4', 'D4', 'D4', 'D4', 'D4', 'D4', 'D4', 'D4', 'D4', 'D4', 'D4', 'D4', 'D4', 'D4', 'D4', 'D4', 'D4', 'D4', '2', 'D4', 'D4', 'D4', 'D4', '2', 'D4', 'D4', '2', 'A3', 'C4', '2.5.9', '2', '2.5.9', '2', '2', '2.5.9', '9.0.4', '0', '10.2.5', '10', '10.2.5', '10', '10', '10.2.5', '2.7', '10', '9.0.4', '9', '9.0.4', '9', '9', '9.2', '7.0', '9', '9.0', '2', '9.2', '2', '2', 'A3', 'C4', '2', '10.2.5', '10', '10.2.5', '10', '10', '10.2', '4.10', '10', '5.9.0', '5', '5.9.0', '5', '5', '0.5', '7.0', '5', '0.4', '0', '0.4', '0', '9', '9.2', 'C4', '9', '2.5.9', '2', '2', '2', 'A3', 'C4', '2', '2.5.9', '2', '2.5.9', '2', '2', '9.2', '5.9', '2', '7.10.2', '10', '7.10.2', '10', '10', '2.7', '9.2', '10', '7.10.2', '7', '7.10.2', '7', '7', '5.9', '4.7', '7', '5.9', '2', 'D4', '2', '2', 'D4', 'E4', '2', '10.2.5', '10', '10.2.5', '10', '10', '7.10.2', '10', '5.9', '2', 'D4', '2', '2', 'D4', 'F4', '2', '9.1.4', '9', '9.1.4', '9', '9', '2.5', '11.2', '9', '9.1.4', '9', '9', '9', 'A4', 'C5', '9', '2.5.9', '2', '2.5.9', '2', '2', '2.5.9', '9.0.4', '0', '10.2.5', '10', '10.2.5', '10', '10', '10.2.5', '2.7', '10', '9.0.4', '9', '9.0.4', '9', '9', '9.2', '7.0', '9', '9.0', '2', '9.2', '2', '2', 'A4', 'C5', '2', '10.2.5', '10', '10.2.5', '10', '10', '10.2', '4.10', '10', '5.9.0', '5', '5.9.0', '5', '5', '0.5', '7.0', '5', '0.4', '0', '0.4', '0', '9', '9.2', 'C5', '9', '2.5.9', '2', '2', '2', 'A4', 'C5', '2', '2.5.9', '2', '2.5.9', '2', '2', '9.2', '5.9', '2', '7.10.2', '10', '7.10.2', '10', '10', '2.7', '9.2', '10', '7.10.2', '7', '7.10.2', '7', '7', '5.9', '4.7', '7', '5.9', '2', 'D5', '2', '2', 'D5', 'E5', '2', '10.2.5', '10', '10.2.5', '10', '10', '7.10.2', '10', '5.9', '2', 'D5', '2', '2', 'D5', 'F5', '2', '9.1.4', '9', '9.1.4', '9', '9', 'D5', 'C#5', '9', '9.2', '2', '9.2', '2', '9.0.4', '0', '0.2.5', '0', 'F5', '0', 'F5', '7.10.2', '10', '9.2', '9', 'F5', '9', '9', '5.9', '9.2', '9', 'A4', '9', '9', '9', '9', '7.10.2', '7', '7', '7', '7.10', '10.2', '7', 'B-4', '7', '7', '7', '7', '1.4', '9', '1.4', '9', '2.7', '9', '9', '1.5.9', '9', '9', '9', 'F4', 'G4', '9', '2.5.9', '2', '2.5.9', '2', '2', '2.5.9', '2', '10.2.5', '2', '2.5.9', '2', '2', '2', '2', '0.4.7', '0', '0.4.7', '0', '0', '0.4.7', '0', '0.4.7', '5', '5.9.0', '5', '5', '5', '5', '2.5.9', '2', '2.5.9', '2', '2', '2.5.9', '2', '10.2.5', '2', '2.5.9', '2', '2', '2', '2', '1.4.7', '9', '1.5', '9', '9', '4.9', '9', '2.5.9', '2', '2', '2', 'D4', 'E4', '2', '2.5.9', '2', '2', '2', 'G4', 'A4', '2', '7.0', '0', '0.5', '0', '0', '0.4', '0', '0', '5.9.0', '5', '7.9.0', '5', '5', '9.0', '5', '5', '0.4.7', '0', '0', '0', 'F4', '0', 'G4', '0', '5.9.0', '5', '5', '5', 'G4', '5', 'F4', '5', '1.4', '9', '1.5', '9', '9', '1.4', '9', '9', '2.5.9', '2', '2', '2', 'E4', 'C4', '2', '2.5.9', '2', '2', '2', 'D5', '2', 'E5', '2', '2.5.9', '2', '2', '2', 'E5', '2', 'F5', '2', '7.0', '0', '0.5', '0', '0', '7.0', '0', '0', '5.9', '5', '7.0', '5', '5', '0.5', '5', '5', '10.2.5', '10', '10', '10', 'D5', '10', 'E5', '10', '2.5.9', '2', '7.9.2', '2', '2', '9.2', '2', '2', '10.2', '7', '10.2', '7', '7', '7.10', '7', '7', '5.9', '9', '9', '9', 'G5', '9', 'E5', '9', '9.2', '9', '9', '9', 'E5', '9', 'C#5', '9', '2.5.9', '2', '2', '2', '2', '2', '7.10.2', '7', '7', '7', '7', '7', '5.9.0', '5', '5.9.0', '5', '5', '5.9.0', '5', '9.0.4', '0', 'G5', '0', '0', '0', '0', '7.10.2', '7', '7', '7', '7', '7', '2.5.9', '9', '9', '9', '9', '9', '5.9', '9', '7.9', '9', '9', '4.9', '9', '9', '2.5.9', '2', '2', 'D5', '2', 'E5', '2', 'F5', '2', '2.5.9', '2', '2', 'D5', '2', 'E5', '2', 'F5', '2', '10.2.5', '10', '10', 'D5', '10', 'E5', '10', 'F5', '10', '5.9.0', '5', '5.9.0', '5', '5', '0.5', '5', '5', '9.0.4', '0', 'G5', '0', '0', '0', '0', '7.10.2', '7', '7', '7', '7', '7', '2.5.9', '9', '9', '9', '9', '9', '5.9', '9', '7.9', '9', '9', '4.9', '9', '9', '2.5.9', '2', '2', '2', '2', 'D4', '2', 'D4', '2']

# for x in range(90):
#     a.append(0)

# a.reverse()
# a=np.reshape(a,(100,1))
# print(a)
# NP = NeuralPiano(NOTES_PATH)

# print(NP.getNotes(a))